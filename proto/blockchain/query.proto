syntax = "proto3";
package chainstockproject.blockchain.blockchain;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "blockchain/stock_transaction.proto";
import "blockchain/stock_data.proto";
import "blockchain/user.proto";

option go_package = "github.com/chainstock-project/blockchain/x/blockchain/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

	// Queries a stockTransaction by index.
	rpc StockTransaction(QueryGetStockTransactionRequest) returns (QueryGetStockTransactionResponse) {
		option (google.api.http).get = "/chainstock-project/blockchain/blockchain/stockTransaction/{creator}";
	}

	// Queries a list of stockTransaction items.
	rpc StockTransactionAll(QueryAllStockTransactionRequest) returns (QueryAllStockTransactionResponse) {
		option (google.api.http).get = "/chainstock-project/blockchain/blockchain/stockTransaction";
	}

	rpc StockTransactionRecord(QueryGetStockTransactionRecordRequest) returns (QueryGetStockTransactionRecordResponse) {
		option (google.api.http).get = "/chainstock-project/blockchain/blockchain/stockTransactionRecord/{creator}";
	}

	// Queries a stockData by date.
	rpc StockData(QueryGetStockDataRequest) returns (QueryGetStockDataResponse) {
		option (google.api.http).get = "/chainstock-project/blockchain/blockchain/stockData/{code}";
	}

	// Queries a list of stockData items.
	rpc StockDataAll(QueryAllStockDataRequest) returns (QueryAllStockDataResponse) {
		option (google.api.http).get = "/chainstock-project/blockchain/blockchain/stockData";
	}


	// Queries a user by name.
	rpc User(QueryGetUserRequest) returns (QueryGetUserResponse) {
		option (google.api.http).get = "/chainstock-project/blockchain/blockchain/user/{name}";
	}

	// Queries a list of user items.
	rpc UserAll(QueryAllUserRequest) returns (QueryAllUserResponse) {
		option (google.api.http).get = "/chainstock-project/blockchain/blockchain/user";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetStockTransactionRequest {
	string creator = 1;
}

message QueryGetStockTransactionResponse {
	StockTransaction StockTransaction = 1;
}

message QueryAllStockTransactionRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStockTransactionResponse {
	repeated StockTransaction StockTransaction = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetStockTransactionRecordRequest {
	string creator = 1;
}

message QueryGetStockTransactionRecordResponse {
	StockTransactionRecord StockTransactionRecord = 1;
}

message QueryGetStockDataRequest {
	string code = 1;
}

message QueryGetStockDataResponse {
	StockData StockData = 1;
}

message QueryAllStockDataRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStockDataResponse {
	repeated StockData StockData = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetUserRequest {
	string name = 1;
}

message QueryGetUserResponse {
	User User = 1;
}

message QueryAllUserRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUserResponse {
	repeated User User = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}